plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "${architectury_loom_version}" apply false
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1' apply false
    id 'com.github.johnrengelman.shadow' version '7.1.2' apply false
    id "me.modmuss50.mod-publish-plugin" version "0.7.4"
}

architectury {
    minecraft = minecraft_version
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'idea'
    apply plugin: 'maven-publish'
    apply plugin: 'architectury-plugin'
    apply plugin: "dev.architectury.loom"
    apply plugin: 'org.jetbrains.gradle.plugin.idea-ext'

    archivesBaseName = mod_id
    version = "${mod_version}+${minecraft_version}"
    group = mod_base_package

    project.ext {
        accessWidenerFile = file("common/src/main/resources/${mod_id}.accesswidener")
    }

    repositories {
        mavenLocal()
        maven { url 'https://maven.parchmentmc.org' }
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.
        maven {
            url = "https://jm.gserv.me/repository/maven-public/"
        }
        maven {
            name = "Fuzs Mod Resources"
            url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/"
        }
        maven {
            url 'https://www.cursemaven.com'
            content { includeGroup 'curse.maven' }
        }

        maven {
            url 'https://api.modrinth.com/maven'
            content { includeGroup 'maven.modrinth' }
        }
        maven {
            // location of the maven that hosts JEI files since January 2023
            name = "Jared's maven"
            url = "https://maven.blamejared.com/"
        }
        maven {
            // location of a maven mirror for JEI files, as a fallback
            name = "ModMaven"
            url = "https://modmaven.dev"
        }
        maven { url "https://maven.minecraftforge.net/" }
        maven { url 'https://jitpack.io' }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = java_version.toInteger()
    }

    java {
        toolchain {
            languageVersion.set(JavaLanguageVersion.of("${java_version}"))
        }

        withSourcesJar()
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
        options.release.set(JavaLanguageVersion.of("${java_version}").asInt())

        javaToolchains {
            compilerFor {
                languageVersion.set(JavaLanguageVersion.of("${java_version}"))
            }
        }
    }

    sourceSets.test {
        java.srcDirs = [ ]
        resources.srcDirs = [ ]
    }

    architectury {
        minecraft = "${minecraft_version}"
    }

//    loom {
//        accessWidenerPath.set(project(':common').loom.accessWidenerPath)
//        silentMojangMappingsLicense()
//    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        // The following line declares the mojmap mappings, you may use other mappings as well
        // The following line declares the yarn mappings you may select this one as well.
        // mappings "net.fabricmc:yarn:@YARN_MAPPINGS@:v2"
        mappings(loom.layered {
            officialMojangMappings()

            if(rootProject.hasProperty('parchment_mappings')) {
                def mcVersion = rootProject.hasProperty('parchment_minecraft_version') ? "${parchment_minecraft_version}" : "${minecraft_version}"
                parchment("org.parchmentmc.data:parchment-${mcVersion}:${parchment_mappings}@zip")
            }
        })

        compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
        compileOnly 'com.google.errorprone:error_prone_annotations:2.11.0'
    }

    processResources {
        project.properties.each {
            inputs.property "${it.key}", "${it.value}"
        }

        filesMatching([ '*.mixins.json', 'META-INF/mods.toml', 'fabric.mod.json', '*.common.json' ]) {
            expand project.properties
        }
    }

}

apply plugin: 'org.jetbrains.gradle.plugin.idea-ext'

idea.module {
    excludeDirs += [
            file('.idea'),
            file('.gradle'),
            file('gradle')
    ]
}
