apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: "me.modmuss50.mod-publish-plugin"

evaluationDependsOn(':common')

def loomPlatform = project.property('loom.platform')
def projectName
if(loomPlatform == 'forge')
    projectName = 'Forge'
else
    projectName = 'Fabric'

def generatedResources = file("src/generated/resources")

sourceSets.main.resources.srcDirs = [ 'src/main/resources', {
    if(loomPlatform == 'fabric'){
        project(':forge').file('src/generated/resources').absolutePath
    }
}
]

loom {
    accessWidenerPath.set(project(":common").loom.accessWidenerPath)
    if(loomPlatform == 'forge'){
        runs {
            client {
                programArgs "--username", "Replicate###"
            }
        }

        forge {
            if(accessWidenerFile.exists()) {
                convertAccessWideners = true
                extraAccessWideners.add accessWidenerFile.name
            }

            if(file("src/main/resources/${mod_id}.mixins.json").exists()) {
                mixinConfig "${mod_id}.mixins.json"
            }

            if(getRootProject().file("common/src/main/resources/${mod_id}-common.mixins.json").exists()) {
                mixinConfig "${mod_id}-common.mixins.json"
            }

            dataGen {
                mod "${mod_id}"
            }
        }
    }
}

def resourceTargets = ['fabric.mod.json', 'mods.toml']
def intoTargets = ["$rootDir/out/production/resources/", "$rootDir/out/production/${project.name}.main/", "$rootDir/bin/main/"]
def replaceProperties = [mod_id             : mod_id, mod_name: mod_name, mod_version: mod_version,
                         mod_authors        : mod_authors, mod_credits:mod_credits, mod_description: mod_description,
                         logo_file          :logo_file,
                         issue_tracker_url  : issue_tracker_url,
                         mod_license        : mod_license,
                         minecraft_version  : minecraft_version, fabric_loader_version: fabric_loader_version,
                         repository_url: repository_url,
                         forge_version: forge_version, forge_loader_version_range: forge_loader_version_range,
                         minimum_minecraft_version: minimum_minecraft_version
]
processResources {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }

    intoTargets.each { target ->
        if (file(target).exists()) {
            copy {
                from(sourceSets.main.resources) {
                    include resourceTargets
                    expand replaceProperties
                }
                into target
            }
        }
    }

}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    create("development${projectName}") {
        extendsFrom common
    }
}

architectury {
    platformSetupLoomIde()

    if(loomPlatform == 'fabric') fabric()
    else if (loomPlatform == 'forge') forge()
}

dependencies {
    // thanks sodium for adding neoforge support, very cool :>

    if(!disable_runtimes.toBoolean()) {
        modRuntimeOnly("mezz.jei:jei-${minecraft_version}-${loomPlatform}:${jei_version}")

        if(loomPlatform == 'fabric'){
            modRuntimeOnly("maven.modrinth:sodium:${sodium_version}-fabric")
            modRuntimeOnly("curse.maven:modernfix-${modern_fix_id}:${modern_fix}")
            modRuntimeOnly("curse.maven:ferritecore-${ferritecore_id}:${ferritecore}")
            modRuntimeOnly("curse.maven:mousetweaks-${mouse_tweaks_id}:${mouse_tweaks}")
        }
    }

    switch(loomPlatform){
        case 'forge':
            forge "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
            break
        case 'fabric':
            modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
            break
    }

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowCommon(project(path: ':common', configuration: "transformProduction${projectName}")) { transitive false }
}

publishMods{
    file = remapJar.archiveFile
    changelog = new File("${rootProject.projectDir}/changelog.md").text
    modLoaders.add("${loomPlatform}")
    type = STABLE
    def minimum_mc_version = rootProject.hasProperty('minimum_minecraft_version') ? rootProject.minimum_minecraft_version : null
    def toDisplay = minimum_mc_version ? "${minimum_mc_version}-${rootProject.minecraft_version}" : "${rootProject.minecraft_version}"
    displayName = "[${projectName}] ${toDisplay} - ${rootProject.mod_version}"

    var CURSE_API_KEY = project.findProperty("curseforge_token") ?: System.getenv("curseforge_token") ?: ""
    if (CURSE_API_KEY != "") {
        curseforge {
            accessToken = CURSE_API_KEY
            projectId = "${rootProject.curseforge_id}"
            minecraftVersions.add("${rootProject.minecraft_version}")
        }
    }

    var MODRINTH_TOKEN = project.findProperty("modrinth_token") ?: System.getenv("modrinth_token") ?: ""
    if (MODRINTH_TOKEN != "") {
        modrinth {
            accessToken = MODRINTH_TOKEN
            projectId = "${rootProject.modrinth_id}"
            minecraftVersions.add("${rootProject.minecraft_version}")
            if(minimum_mc_version != minecraft_version){
                minecraftVersionRange {
                    start = "${minimum_mc_version}"
                    end = "${minecraft_version}"

                    includeSnapshots = true
                }
            }
        }
    }
}

shadowJar {
    exclude 'architectury.common.json'

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    if(loomPlatform == 'fabric') {
        injectAccessWidener = true
    }

    inputFile = shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = null
}

jar {
    archiveClassifier = 'dev'
}

sourcesJar {
    def commonSources = project(':common').sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

idea.module {
    excludeDirs += [
            file('.gradle'),
            file('build'),
            file('run')
    ]
}

publishing {
    publications {
        if(loomPlatform == 'forge')
            mavenForge(MavenPublication) {
                groupId = group
                artifactId = mod_id
                version = version + "-${loomPlatform}"
                from components.java
            }
        else
            mavenFabric(MavenPublication) {
                groupId = group
                artifactId = mod_id
                version = version + "-${loomPlatform}"
                from components.java
            }
    }
    repositories {
        mavenLocal()
    }
}
